{"ast":null,"code":"// MatchSpace/client/src/services/api.js\n\nimport axios from 'axios';\n\n// Create an Axios instance with default configuration\nconst api = axios.create({\n  // This URL MUST match your backend server's address and API prefix\n  // It will read from process.env.REACT_APP_API_URL (set in client/.env file)\n  // or default to http://localhost:5000/api if the env var is not set.\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor for adding auth token to every outgoing request\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('tutorMatchToken'); // Get token from local storage\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`; // Add Authorization header\n  }\n  return config;\n}, error => {\n  return Promise.reject(error); // Pass any request errors down the chain\n});\n\n// Response interceptor for handling common API responses, especially token expiration\napi.interceptors.response.use(response => {\n  return response; // If response is successful, just return it\n}, async error => {\n  const originalRequest = error.config;\n\n  // Check if the error is 401 (Unauthorized) and it's not a retry\n  // This typically means the access token has expired or is invalid\n  if (error.response.status === 401 && !originalRequest._retry) {\n    originalRequest._retry = true; // Mark this request as retried\n\n    try {\n      const refreshToken = localStorage.getItem('tutorMatchRefreshToken'); // Get refresh token\n      if (refreshToken) {\n        // Attempt to get a new access token using the refresh token\n        // The endpoint for refresh token should be relative to your baseURL\n        // (e.g., if baseURL is /api, this hits /api/auth/refresh-token)\n        const response = await axios.post(`${api.defaults.baseURL}/auth/refresh-token`, {\n          refreshToken\n        });\n        const {\n          token\n        } = response.data; // Extract new access token\n        localStorage.setItem('tutorMatchToken', token); // Store new access token\n\n        originalRequest.headers['Authorization'] = `Bearer ${token}`; // Update header for original request\n        return api(originalRequest); // Retry the original failed request with the new token\n      }\n    } catch (refreshError) {\n      // If refresh token request itself fails (e.g., refresh token expired/invalid)\n      console.error(\"Token refresh failed:\", refreshError);\n      // Clear all tokens and redirect to login page\n      localStorage.removeItem('tutorMatchToken');\n      localStorage.removeItem('tutorMatchRefreshToken');\n      window.location.href = '/login'; // Redirect to login page\n      return Promise.reject(refreshError); // Propagate the refresh error\n    }\n  }\n  return Promise.reject(error); // For any other errors, propagate them\n});\n\n// Auth API endpoints (these will call your backend's /api/auth routes)\nconst auth = {\n  register: userData => api.post('/auth/register', userData),\n  login: credentials => api.post('/auth/login', credentials),\n  logout: () => {\n    localStorage.removeItem('tutorMatchToken'); // Clear tokens on logout\n    localStorage.removeItem('tutorMatchRefreshToken');\n  },\n  getCurrentUser: () => api.get('/auth/me'),\n  // Example: get current user's profile\n  updateProfile: userData => api.put('/auth/profile', userData) // Example: update user profile\n};\n\n// Tutors API endpoints (these will call your backend's /api/tutors routes)\nconst tutors = {\n  getAll: params => api.get('/tutors', {\n    params\n  }),\n  // Get all tutors, possibly with query parameters\n  getById: id => api.get(`/tutors/${id}`),\n  // Get a single tutor by ID\n  becomeTutor: tutorData => api.post('/tutors/apply', tutorData),\n  // Apply to be a tutor\n  updateTutor: tutorData => api.put(`/tutors/${tutorData.id}`, tutorData),\n  // Update tutor profile\n  updateAvailability: (tutorId, availabilities) => api.put(`/tutors/${tutorId}/availabilities`, {\n    availabilities\n  }),\n  // Update tutor's availability\n  getAvailabilities: tutorId => api.get(`/tutors/${tutorId}/availabilities`),\n  // Get tutor's availability\n  deleteAvailability: (tutorId, availabilityId) => api.delete(`/tutors/${tutorId}/availabilities/${availabilityId}`),\n  // Delete a specific availability slot\n  addAvailability: (tutorId, availability) => api.post(`/tutors/${tutorId}/availabilities`, availability),\n  // Add a new availability slot\n  getRatings: tutorId => api.get(`/tutors/${tutorId}/ratings`) // Get ratings for a tutor\n};\n\n// Students API endpoints (these will call your backend's /api/students routes)\nconst students = {\n  getDashboard: () => api.get('/students/dashboard'),\n  // Get student dashboard data\n  getBookings: () => api.get('/students/bookings') // Get student's bookings\n};\n\n// Bookings API endpoints (these will call your backend's /api/bookings routes)\nconst bookings = {\n  create: bookingData => api.post('/bookings', bookingData),\n  // Create a new booking\n  getAll: params => api.get('/bookings', {\n    params\n  }),\n  // Get all bookings, possibly with query parameters\n  getById: id => api.get(`/bookings/${id}`),\n  // Get a single booking by ID\n  update: (id, bookingData) => api.put(`/bookings/${id}`, bookingData),\n  // Update a booking\n  cancel: id => api.delete(`/bookings/${id}`),\n  // Cancel a booking\n  addRating: (bookingId, ratingData) => api.post(`/bookings/${bookingId}/ratings`, ratingData) // Add a rating to a booking\n};\n\n// Messages API endpoints (these will call your backend's /api/messages routes)\nconst messages = {\n  getConversations: () => api.get('/messages/conversations'),\n  // Get list of conversations\n  getConversation: userId => api.get(`/messages/conversations/${userId}`),\n  // Get messages in a specific conversation\n  sendMessage: (receiverId, content) => api.post('/messages', {\n    receiverId,\n    content\n  }) // Send a new message\n};\n\n// Search API endpoints (these will call your backend's /api/search routes)\nconst search = {\n  tutors: params => api.get('/search/tutors', {\n    params\n  }),\n  // Search for tutors\n  subjects: query => api.get('/search/subjects', {\n    params: {\n      query\n    }\n  }) // Search for subjects\n};\n\n// Export the main Axios instance and all defined endpoint categories\nexport default {\n  ...api,\n  // Spreads all properties and methods of the base Axios instance\n  auth,\n  tutors,\n  students,\n  bookings,\n  messages,\n  search,\n  // Explicitly export core Axios methods for direct use if preferred\n  get: api.get,\n  post: api.post,\n  put: api.put,\n  delete: api.delete\n};","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","headers","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","response","originalRequest","status","_retry","refreshToken","post","defaults","data","setItem","refreshError","console","removeItem","window","location","href","auth","register","userData","login","credentials","logout","getCurrentUser","get","updateProfile","put","tutors","getAll","params","getById","id","becomeTutor","tutorData","updateTutor","updateAvailability","tutorId","availabilities","getAvailabilities","deleteAvailability","availabilityId","delete","addAvailability","availability","getRatings","students","getDashboard","getBookings","bookings","bookingData","update","cancel","addRating","bookingId","ratingData","messages","getConversations","getConversation","userId","sendMessage","receiverId","content","search","subjects","query"],"sources":["/Users/vinodmenon/Documents/matchspace/client/src/services/api.js"],"sourcesContent":["// MatchSpace/client/src/services/api.js\n\nimport axios from 'axios';\n\n// Create an Axios instance with default configuration\nconst api = axios.create({\n  // This URL MUST match your backend server's address and API prefix\n  // It will read from process.env.REACT_APP_API_URL (set in client/.env file)\n  // or default to http://localhost:5000/api if the env var is not set.\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api', \n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor for adding auth token to every outgoing request\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('tutorMatchToken'); // Get token from local storage\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`; // Add Authorization header\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error); // Pass any request errors down the chain\n  }\n);\n\n// Response interceptor for handling common API responses, especially token expiration\napi.interceptors.response.use(\n  (response) => {\n    return response; // If response is successful, just return it\n  },\n  async (error) => {\n    const originalRequest = error.config;\n    \n    // Check if the error is 401 (Unauthorized) and it's not a retry\n    // This typically means the access token has expired or is invalid\n    if (error.response.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true; // Mark this request as retried\n      \n      try {\n        const refreshToken = localStorage.getItem('tutorMatchRefreshToken'); // Get refresh token\n        if (refreshToken) {\n          // Attempt to get a new access token using the refresh token\n          // The endpoint for refresh token should be relative to your baseURL\n          // (e.g., if baseURL is /api, this hits /api/auth/refresh-token)\n          const response = await axios.post(`${api.defaults.baseURL}/auth/refresh-token`, {\n            refreshToken\n          });\n          \n          const { token } = response.data; // Extract new access token\n          localStorage.setItem('tutorMatchToken', token); // Store new access token\n          \n          originalRequest.headers['Authorization'] = `Bearer ${token}`; // Update header for original request\n          return api(originalRequest); // Retry the original failed request with the new token\n        }\n      } catch (refreshError) {\n        // If refresh token request itself fails (e.g., refresh token expired/invalid)\n        console.error(\"Token refresh failed:\", refreshError);\n        // Clear all tokens and redirect to login page\n        localStorage.removeItem('tutorMatchToken');\n        localStorage.removeItem('tutorMatchRefreshToken');\n        window.location.href = '/login'; // Redirect to login page\n        return Promise.reject(refreshError); // Propagate the refresh error\n      }\n    }\n    \n    return Promise.reject(error); // For any other errors, propagate them\n  }\n);\n\n// Auth API endpoints (these will call your backend's /api/auth routes)\nconst auth = {\n  register: (userData) => api.post('/auth/register', userData),\n  login: (credentials) => api.post('/auth/login', credentials),\n  logout: () => {\n    localStorage.removeItem('tutorMatchToken'); // Clear tokens on logout\n    localStorage.removeItem('tutorMatchRefreshToken');\n  },\n  getCurrentUser: () => api.get('/auth/me'), // Example: get current user's profile\n  updateProfile: (userData) => api.put('/auth/profile', userData), // Example: update user profile\n};\n\n// Tutors API endpoints (these will call your backend's /api/tutors routes)\nconst tutors = {\n  getAll: (params) => api.get('/tutors', { params }), // Get all tutors, possibly with query parameters\n  getById: (id) => api.get(`/tutors/${id}`), // Get a single tutor by ID\n  becomeTutor: (tutorData) => api.post('/tutors/apply', tutorData), // Apply to be a tutor\n  updateTutor: (tutorData) => api.put(`/tutors/${tutorData.id}`, tutorData), // Update tutor profile\n  updateAvailability: (tutorId, availabilities) => api.put(`/tutors/${tutorId}/availabilities`, { availabilities }), // Update tutor's availability\n  getAvailabilities: (tutorId) => api.get(`/tutors/${tutorId}/availabilities`), // Get tutor's availability\n  deleteAvailability: (tutorId, availabilityId) => api.delete(`/tutors/${tutorId}/availabilities/${availabilityId}`), // Delete a specific availability slot\n  addAvailability: (tutorId, availability) => api.post(`/tutors/${tutorId}/availabilities`, availability), // Add a new availability slot\n  getRatings: (tutorId) => api.get(`/tutors/${tutorId}/ratings`), // Get ratings for a tutor\n};\n\n// Students API endpoints (these will call your backend's /api/students routes)\nconst students = {\n  getDashboard: () => api.get('/students/dashboard'), // Get student dashboard data\n  getBookings: () => api.get('/students/bookings'), // Get student's bookings\n};\n\n// Bookings API endpoints (these will call your backend's /api/bookings routes)\nconst bookings = {\n  create: (bookingData) => api.post('/bookings', bookingData), // Create a new booking\n  getAll: (params) => api.get('/bookings', { params }), // Get all bookings, possibly with query parameters\n  getById: (id) => api.get(`/bookings/${id}`), // Get a single booking by ID\n  update: (id, bookingData) => api.put(`/bookings/${id}`, bookingData), // Update a booking\n  cancel: (id) => api.delete(`/bookings/${id}`), // Cancel a booking\n  addRating: (bookingId, ratingData) => api.post(`/bookings/${bookingId}/ratings`, ratingData), // Add a rating to a booking\n};\n\n// Messages API endpoints (these will call your backend's /api/messages routes)\nconst messages = {\n  getConversations: () => api.get('/messages/conversations'), // Get list of conversations\n  getConversation: (userId) => api.get(`/messages/conversations/${userId}`), // Get messages in a specific conversation\n  sendMessage: (receiverId, content) => api.post('/messages', { receiverId, content }), // Send a new message\n};\n\n// Search API endpoints (these will call your backend's /api/search routes)\nconst search = {\n  tutors: (params) => api.get('/search/tutors', { params }), // Search for tutors\n  subjects: (query) => api.get('/search/subjects', { params: { query } }), // Search for subjects\n};\n\n// Export the main Axios instance and all defined endpoint categories\nexport default {\n  ...api, // Spreads all properties and methods of the base Axios instance\n  auth,\n  tutors,\n  students,\n  bookings,\n  messages,\n  search,\n  // Explicitly export core Axios methods for direct use if preferred\n  get: api.get,\n  post: api.post,\n  put: api.put,\n  delete: api.delete\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}