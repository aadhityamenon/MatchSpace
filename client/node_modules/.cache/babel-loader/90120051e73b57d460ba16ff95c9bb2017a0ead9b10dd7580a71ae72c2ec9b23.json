{"ast":null,"code":"var _jsxFileName = \"/Users/vinodmenon/Documents/matchspace/client/src/context/AuthContext.js\",\n  _s = $RefreshSig$();\n// client/src/context/AuthContext.js\n\nimport React, { createContext, useState, useEffect, useCallback } from 'react';\nimport api from '../services/api'; // Ensure this path is correct\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false); // New state to explicitly track authentication status\n  const [loading, setLoading] = useState(true); // Tracks initial load, not ongoing API calls\n\n  // Function to load user from token\n  // Use useCallback to memoize and prevent unnecessary re-renders/re-creations\n  const loadUser = useCallback(async () => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      try {\n        // Use the /api/auth/me endpoint from your server\n        // The api interceptor will automatically add the token\n        const res = await api.get('/auth/me'); // Corrected endpoint as per your authroutes.js\n        setCurrentUser(res.data.user);\n        setIsAuthenticated(true);\n      } catch (err) {\n        // If token is invalid or expired, /auth/me will return 401.\n        // The api interceptor will try to refresh. If refresh fails,\n        // it will clear localStorage and redirect to login.\n        // So, here we just ensure state is cleared if something goes wrong.\n        console.error(\"Failed to load user or token invalid:\", err);\n        localStorage.removeItem('token');\n        localStorage.removeItem('refreshToken'); // Ensure refresh token is also cleared\n        setCurrentUser(null);\n        setIsAuthenticated(false);\n      } finally {\n        setLoading(false); // Ensure loading is set to false after initial check\n      }\n    } else {\n      setCurrentUser(null);\n      setIsAuthenticated(false);\n      setLoading(false); // No token, so stop loading immediately\n    }\n  }, []); // Empty dependency array means this function is created once\n\n  // Initial check on component mount\n  useEffect(() => {\n    loadUser();\n  }, [loadUser]); // Depend on loadUser to ensure it's called if loadUser somehow changes (unlikely with useCallback here)\n\n  const login = async (email, password) => {\n    try {\n      const res = await api.post('/auth/login', {\n        email,\n        password\n      });\n      // Store both access token and refresh token\n      localStorage.setItem('token', res.data.token);\n      localStorage.setItem('refreshToken', res.data.refreshToken); // Store refresh token\n      setCurrentUser(res.data.user);\n      setIsAuthenticated(true);\n      return res.data.user; // Return user data for component\n    } catch (err) {\n      var _err$response, _err$response$data, _err$response2, _err$response2$data;\n      console.error(\"Login error:\", ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || err.message);\n      // Re-throw the specific error message from the backend\n      throw ((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || 'Login failed';\n    }\n  };\n  const register = async userData => {\n    try {\n      const res = await api.post('/auth/register', userData);\n      // Store both access token and refresh token\n      localStorage.setItem('token', res.data.token);\n      localStorage.setItem('refreshToken', res.data.refreshToken); // Store refresh token\n      setCurrentUser(res.data.user);\n      setIsAuthenticated(true);\n      return res.data.user; // Return user data for component\n    } catch (err) {\n      var _err$response3, _err$response3$data, _err$response4, _err$response4$data;\n      console.error(\"Register error:\", ((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : (_err$response3$data = _err$response3.data) === null || _err$response3$data === void 0 ? void 0 : _err$response3$data.message) || err.message);\n      // Re-throw the specific error message from the backend\n      throw ((_err$response4 = err.response) === null || _err$response4 === void 0 ? void 0 : (_err$response4$data = _err$response4.data) === null || _err$response4$data === void 0 ? void 0 : _err$response4$data.message) || 'Registration failed';\n    }\n  };\n  const logout = async () => {\n    try {\n      // Call your backend logout endpoint to invalidate the refresh token on the server\n      await api.post('/auth/logout');\n    } catch (error) {\n      console.error(\"Error logging out on server:\", error);\n      // Even if server logout fails, clear client state\n    } finally {\n      localStorage.removeItem('token');\n      localStorage.removeItem('refreshToken'); // IMPORTANT: Also remove the refresh token\n      setCurrentUser(null);\n      setIsAuthenticated(false);\n      // Optionally, redirect here if you don't do it in App.js\n      // window.location.href = '/login';\n    }\n  };\n  const value = {\n    currentUser,\n    isAuthenticated,\n    // Expose isAuthenticated state\n    loading,\n    login,\n    register,\n    logout,\n    loadUser // Expose loadUser for manual re-fetching if needed (e.g., after profile update)\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"h/G/9P+URV5YZJoABmNSTGxVVZs=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useCallback","api","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","currentUser","setCurrentUser","isAuthenticated","setIsAuthenticated","loading","setLoading","loadUser","token","localStorage","getItem","res","get","data","user","err","console","error","removeItem","login","email","password","post","setItem","refreshToken","_err$response","_err$response$data","_err$response2","_err$response2$data","response","message","register","userData","_err$response3","_err$response3$data","_err$response4","_err$response4$data","logout","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/vinodmenon/Documents/matchspace/client/src/context/AuthContext.js"],"sourcesContent":["// client/src/context/AuthContext.js\n\nimport React, { createContext, useState, useEffect, useCallback } from 'react';\nimport api from '../services/api'; // Ensure this path is correct\n\nexport const AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false); // New state to explicitly track authentication status\n  const [loading, setLoading] = useState(true); // Tracks initial load, not ongoing API calls\n\n  // Function to load user from token\n  // Use useCallback to memoize and prevent unnecessary re-renders/re-creations\n  const loadUser = useCallback(async () => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      try {\n        // Use the /api/auth/me endpoint from your server\n        // The api interceptor will automatically add the token\n        const res = await api.get('/auth/me'); // Corrected endpoint as per your authroutes.js\n        setCurrentUser(res.data.user);\n        setIsAuthenticated(true);\n      } catch (err) {\n        // If token is invalid or expired, /auth/me will return 401.\n        // The api interceptor will try to refresh. If refresh fails,\n        // it will clear localStorage and redirect to login.\n        // So, here we just ensure state is cleared if something goes wrong.\n        console.error(\"Failed to load user or token invalid:\", err);\n        localStorage.removeItem('token');\n        localStorage.removeItem('refreshToken'); // Ensure refresh token is also cleared\n        setCurrentUser(null);\n        setIsAuthenticated(false);\n      } finally {\n        setLoading(false); // Ensure loading is set to false after initial check\n      }\n    } else {\n      setCurrentUser(null);\n      setIsAuthenticated(false);\n      setLoading(false); // No token, so stop loading immediately\n    }\n  }, []); // Empty dependency array means this function is created once\n\n  // Initial check on component mount\n  useEffect(() => {\n    loadUser();\n  }, [loadUser]); // Depend on loadUser to ensure it's called if loadUser somehow changes (unlikely with useCallback here)\n\n  const login = async (email, password) => {\n    try {\n      const res = await api.post('/auth/login', { email, password });\n      // Store both access token and refresh token\n      localStorage.setItem('token', res.data.token);\n      localStorage.setItem('refreshToken', res.data.refreshToken); // Store refresh token\n      setCurrentUser(res.data.user);\n      setIsAuthenticated(true);\n      return res.data.user; // Return user data for component\n    } catch (err) {\n      console.error(\"Login error:\", err.response?.data?.message || err.message);\n      // Re-throw the specific error message from the backend\n      throw err.response?.data?.message || 'Login failed';\n    }\n  };\n\n  const register = async (userData) => {\n    try {\n      const res = await api.post('/auth/register', userData);\n      // Store both access token and refresh token\n      localStorage.setItem('token', res.data.token);\n      localStorage.setItem('refreshToken', res.data.refreshToken); // Store refresh token\n      setCurrentUser(res.data.user);\n      setIsAuthenticated(true);\n      return res.data.user; // Return user data for component\n    } catch (err) {\n      console.error(\"Register error:\", err.response?.data?.message || err.message);\n      // Re-throw the specific error message from the backend\n      throw err.response?.data?.message || 'Registration failed';\n    }\n  };\n\n  const logout = async () => {\n    try {\n      // Call your backend logout endpoint to invalidate the refresh token on the server\n      await api.post('/auth/logout');\n    } catch (error) {\n      console.error(\"Error logging out on server:\", error);\n      // Even if server logout fails, clear client state\n    } finally {\n      localStorage.removeItem('token');\n      localStorage.removeItem('refreshToken'); // IMPORTANT: Also remove the refresh token\n      setCurrentUser(null);\n      setIsAuthenticated(false);\n      // Optionally, redirect here if you don't do it in App.js\n      // window.location.href = '/login';\n    }\n  };\n\n  const value = {\n    currentUser,\n    isAuthenticated, // Expose isAuthenticated state\n    loading,\n    login,\n    register,\n    logout,\n    loadUser // Expose loadUser for manual re-fetching if needed (e.g., after profile update)\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {/* Only render children when initial loading is complete */}\n      {!loading && children}\n    </AuthContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}